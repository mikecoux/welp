'use client'

import usePlacesAutoComplete, {
    getGeocode,
    getLatLng,
} from "use-places-autocomplete";
import {
	Combobox,
	ComboboxInput,
	ComboboxPopover,
	ComboboxList,
	ComboboxOption,
	ComboboxOptionText,
} from "@reach/combobox";
import "@reach/combobox/styles.css";

export default function SearchLocation({ onChange, setSelected }) {
    const {
        ready,
        value,
        setValue,
        suggestions: {status, data},
        clearSuggestions
    } = usePlacesAutoComplete({
        // filters the results generated by Places API
        // 'geocode' instructs the service to only return geocoding results, rather than business results
        // alternatively, try '(regions)'
        requestOptions: {
            types: ['geocode']
        }
    });

    const handleSelect = async (address:string) => {
        // sets the value of the input
        setValue(address, false);
        // sends data back to the react-hook-form controller wrapper component
        onChange(address);
        clearSuggestions();

        // Move these to search results page and pull params from url
        const results = await getGeocode({ address });
        const { lat, lng } = await getLatLng(results[0])
        setSelected({ lat, lng })
    } 

    return (
        <Combobox onSelect={handleSelect}>
            <ComboboxInput 
                value={value} 
                onChange={(e)=> {
                    setValue(e.target.value)
                }} 
                disabled={!ready}
                className="rounded outline-none" 
                placeholder=" city, zip code, ..."
            />
            <ComboboxPopover>
                <ComboboxList>
                    {status === "OK" &&
                        data.map(({ place_id, description }) => (
                        <ComboboxOption key={place_id} value={description} />
                    ))}
                </ComboboxList>
            </ComboboxPopover>
        </Combobox>
    )
}

